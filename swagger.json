{
  "openapi": "3.0.1",
  "info": {
    "title": "Avabuddies backend",
    "description": "This is the backend for the avabuddies iOS and Android app",
    "contact": {
      "email": "info@avanbuddies.nl"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://dev.avabuddies.nl/"
    },
    {
      "url": "https://www.avabuddies.nl"
    }
  ],
  "tags": [
    {
      "name": "auth",
      "description": "Everything related to authentication"
    },
    {
      "name": "user",
      "description": "Methods to modify your account"
    },
    {
      "name": "friend",
      "description": "Methods to make friends, see your friends and accept friend requests"
    },
    {
      "name": "tags",
      "description": "Methods to manage tags"
    }
  ],
  "paths": {
    "/auth/signup": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Register a new user.",
        "operationId": "signup",
        "requestBody": {
          "description": "User parameters that need to be registered.",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/RegisterUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "signup sucessful",
            "content": {}
          },
          "500": {
            "description": "error while saving user"
          }
        }
      }
    },
    "/user": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update an existing user",
        "operationId": "updateUser",
        "requestBody": {
          "description": "User object that needs to be added to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "405": {
            "description": "Validation exception",
            "content": {}
          }
        },
        "security": [
          {
            "userstore_auth": [
              "write:users",
              "read:users"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Add a new user to the store",
        "operationId": "addUser",
        "requestBody": {
          "description": "User object that needs to be added to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input",
            "content": {}
          }
        },
        "security": [
          {
            "userstore_auth": [
              "write:users",
              "read:users"
            ]
          }
        ]
      }
    },
    "/user/{userId}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Find user by ID",
        "description": "Returns a single user",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Deletes a user",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          }
        },
        "security": [
          {
            "userstore_auth": [
              "write:users",
              "read:users"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Updated user object",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid user supplied",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "required": [
          "email",
          "name",
          "password",
          "sharelocation"
        ],
        "properties": {
          "_id": {
            "type": "objectid"
          },
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "aboutme": {
            "type": "string"
          },
          "sharelocation": {
            "type": "string"
          },
          "isAdmin": {
            "type": "boolean",
            "default": false
          },
          "isPrivate": {
            "type": "boolean",
            "default": false
          },
          "image": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          }
        },
        "xml": {
          "name": "User"
        }
      },
      "Friend": {
        "type": "object",
        "required": [
          "user",
          "friend",
          "confirmed",
          "validated"
        ],
        "properties": {
          "_id": {
            "type": "objectid"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "friend": {
            "$ref": "#/components/schemas/User"
          },
          "confirmed": {
            "type": "boolean",
            "default": false
          },
          "validated": {
            "type": "boolean",
            "default": false
          }
        },
        "xml": {
          "name": "Tag"
        }
      },
      "Tag": {
        "type": "object",
        "required": [
          "name",
          "isPrivate",
          "sharelocation"
        ],
        "properties": {
          "_id": {
            "type": "objectid"
          },
          "name": {
            "type": "string"
          },
          "isPrivate": {
            "type": "boolean",
            "default": false
          }
        },
        "xml": {
          "name": "Tag"
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "userstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "http://userstore.swagger.io/oauth/dialog",
            "scopes": {
              "write:users": "modify users in your account",
              "read:users": "read your users"
            }
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    }
  }
}
